// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"fmt"
	"io"
	"strconv"

	"github.com/guzmanweb/labx-gqlgen/dbmodel"
)

type AdminMutation struct {
	CreateClient Client `json:"createClient"`
}

type AdminQuery struct {
	Clients *ClientConnection `json:"clients"`
}

type AdviseMessage interface {
	IsAdviseMessage()
}

type Client struct {
	Code          string              `json:"code"`
	ClientData    *dbmodel.ClientData `json:"clientData"`
	AdviseMessage []AdviseMessage     `json:"adviseMessage"`
	CreatedAt     string              `json:"createdAt"`
	UpdatedAt     string              `json:"updatedAt"`
}

func (Client) IsNode() {}

type ClientConnection struct {
	Edges    []*ClientEdge `json:"edges"`
	PageInfo PageInfo      `json:"pageInfo"`
}

type ClientEdge struct {
	Node   *Client `json:"node"`
	Cursor string  `json:"cursor"`
}

type ClientFilter struct {
	Code     []*string `json:"code"`
	Name     []string  `json:"name"`
	IsActive *bool     `json:"isActive"`
}

type CreateClientInput struct {
	Code     string `json:"code"`
	Name     string `json:"name"`
	IsActive bool   `json:"isActive"`
}

type ExternalMessage struct {
	Code    *string `json:"code"`
	Message string  `json:"message"`
}

type Node interface {
	IsNode()
}

type PageInfo struct {
	HasNextPage     bool   `json:"hasNextPage"`
	HasPreviousPage bool   `json:"hasPreviousPage"`
	StartCursor     string `json:"startCursor"`
	EndCursor       string `json:"endCursor"`
}

type AdviseMessageLevel string

const (
	AdviseMessageLevelWarn  AdviseMessageLevel = "WARN"
	AdviseMessageLevelError AdviseMessageLevel = "ERROR"
	AdviseMessageLevelInfo  AdviseMessageLevel = "INFO"
)

func (e AdviseMessageLevel) IsValid() bool {
	switch e {
	case AdviseMessageLevelWarn, AdviseMessageLevelError, AdviseMessageLevelInfo:
		return true
	}
	return false
}

func (e AdviseMessageLevel) String() string {
	return string(e)
}

func (e *AdviseMessageLevel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AdviseMessageLevel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AdviseMessageLevel", str)
	}
	return nil
}

func (e AdviseMessageLevel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
